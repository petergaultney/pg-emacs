(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(auto-save-file-name-transforms (quote ((".*" "~/.emacs.d/autosaves/\\1" t))))
 '(backup-directory-alist (quote ((".*" . "~/.emacs.d/backups/"))))
 '(c-basic-offset 4)
 '(c-default-style
   (quote
    ((java-mode . "java")
     (awk-mode . "awk")
     (other . "linux"))))
 '(c-offsets-alist
   (quote
    ((inexpr-class . +)
     (inexpr-statement . +)
     (lambda-intro-cont . +)
     (inlambda . c-lineup-inexpr-block)
     (template-args-cont c-lineup-template-args +)
     (incomposition . +)
     (inmodule . +)
     (innamespace . 0)
     (inextern-lang . +)
     (composition-close . 0)
     (module-close . 0)
     (namespace-close . 0)
     (extern-lang-close . 0)
     (composition-open . 0)
     (module-open . 0)
     (namespace-open . 0)
     (extern-lang-open . 0)
     (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)
     (objc-method-args-cont . c-lineup-ObjC-method-args)
     (objc-method-intro .
                        [0])
     (friend . 0)
     (cpp-define-intro c-lineup-cpp-define +)
     (cpp-macro-cont . +)
     (cpp-macro .
                [0])
     (inclass . +)
     (stream-op . c-lineup-streamop)
     (arglist-cont-nonempty c-lineup-gcc-asm-reg c-lineup-arglist)
     (arglist-cont c-lineup-gcc-asm-reg 0)
     (arglist-intro . +)
     (catch-clause . 0)
     (else-clause . 0)
     (do-while-closure . 0)
     (label . 2)
     (access-label . -)
     (substatement-label . 2)
     (substatement . +)
     (statement-case-open . 0)
     (statement-case-intro . +)
     (statement-block-intro . +)
     (statement-cont . +)
     (statement . 0)
     (brace-entry-open . 0)
     (brace-list-entry . 0)
     (brace-list-intro . +)
     (brace-list-close . 0)
     (brace-list-open . 0)
     (block-close . 0)
     (inher-cont . c-lineup-multi-inher)
     (inher-intro . +)
     (member-init-cont . c-lineup-multi-inher)
     (member-init-intro . +)
     (annotation-var-cont . +)
     (annotation-top-cont . 0)
     (topmost-intro-cont . c-lineup-topmost-intro-cont)
     (topmost-intro . 0)
     (knr-argdecl . 0)
     (func-decl-cont . +)
     (inline-close . 0)
     (inline-open . 0)
     (class-close . 0)
     (class-open . 0)
     (defun-block-intro . +)
     (defun-close . 0)
     (defun-open . 0)
     (string . c-lineup-dont-change)
     (arglist-close . c-lineup-arglist)
     (substatement-open . 0)
     (case-label . 0)
     (block-open . 0)
     (c . 1)
     (comment-intro . 0)
     (knr-argdecl-intro . -)
     (c-cleanup-list scope-operator brace-else-brace brace-elseif-brace brace-catch-brace empty-defun-braces list-close-comma defun-close-semi)
     (c-hanging-semi&comma-criteria c-semi&comma-no-newlines-before-nonblanks)
     (c-hanging-colons-alist
      (member-init-intro before)
      (inher-intro)
      (case-label after)
      (label after)
      (access-label after))
     (c-hanging-braces-alist
      (substatement-open after)
      (brace-list-open after)
      (brace-entry-open)
      (defun-open after)
      (class-open after)
      (inline-open after)
      (block-open after)
      (block-close . c-snug-do-while)
      (statement-case-open after)
      (substatement after))
     (c-comment-only-line-offset . 0)
     (c-tab-always-indent . t))))
 '(custom-safe-themes
   (quote
    ("3c83b3676d796422704082049fc38b6966bcad960f896669dfc21a7a37a748fa" default)))
 '(evil-move-beyond-eol t)
 '(evil-want-Y-yank-to-eol nil)
 '(flycheck-javascript-flow-args nil)
 '(global-hl-line-mode t)
 '(header-auto-update-enabled t t)
 '(ido-mode (quote both) nil (ido))
 '(indent-tabs-mode 0)
 '(js-indent-level 2)
 '(lua-indent-level 4)
 '(lua-prefix-key "C-c")
 '(minibuffer-prompt-properties
   (quote
    (read-only t point-entered minibuffer-avoid-prompt face minibuffer-prompt)))
 '(org-agenda-files (quote ("~/org/xoi.org")))
 '(org-default-priority 68)
 '(org-hide-leading-stars t)
 '(org-highest-priority 65)
 '(org-lowest-priority 68)
 '(org-replace-disputed-keys nil)
 '(org-return-follows-link t)
 '(org-startup-indented t)
 '(org-todo-keywords
   (quote
    ((sequence "TODO(t)" "PROG(p)" "WAIT(w)" "|" "DONE(d)" "CANCELED(c)"))))
 '(package-archives
   (quote
    (("gnu" . "http://elpa.gnu.org/packages/")
     ("marmalade" . "http://marmalade-repo.org/packages/")
     ("Tromey" . "http://tromey.com/elpa/")
     ("melpa" . "https://melpa.org/packages/"))))
 '(package-selected-packages
   (quote
    (insert-shebang fish-mode company-shell orgit org-projectile org-category-capture org-present yapfify which-key wgrep use-package unfill smex smeargle pytest pyenv-mode py-isort pip-requirements pcre2el org-pomodoro org-mime org-fancy-priorities org-download mwim multiple-cursors mmm-mode markdown-toc magit-gitflow macrostep live-py-mode ivy-hydra hy-mode htmlize helm-make gnuplot gitignore-mode gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link gh-md fuzzy flycheck-flow flx exec-path-from-shell evil-visualstar evil-magit evil-escape elpy elisp-slime-nav diminish cython-mode counsel-projectile company-statistics company-anaconda bind-map auto-yasnippet auto-compile ace-window ac-ispell)))
 '(safe-local-variable-values
   (quote
    ((c-offsets-alist
      (inexpr-class . +)
      (inexpr-statement . +)
      (lambda-intro-cont . +)
      (inlambda . c-lineup-inexpr-block)
      (template-args-cont c-lineup-template-args +)
      (incomposition . +)
      (inmodule . +)
      (innamespace . +)
      (inextern-lang . +)
      (composition-close . 0)
      (module-close . 0)
      (namespace-close . 0)
      (extern-lang-close . 0)
      (composition-open . 0)
      (module-open . 0)
      (namespace-open . 0)
      (extern-lang-open . 0)
      (objc-method-call-cont c-lineup-ObjC-method-call-colons c-lineup-ObjC-method-call +)
      (objc-method-args-cont . c-lineup-ObjC-method-args)
      (objc-method-intro .
                         [0])
      (friend . 0)
      (cpp-define-intro c-lineup-cpp-define +)
      (cpp-macro-cont . +)
      (cpp-macro .
                 [0])
      (inclass . +)
      (stream-op . c-lineup-streamop)
      (arglist-cont-nonempty c-lineup-gcc-asm-reg c-lineup-arglist)
      (arglist-cont c-lineup-gcc-asm-reg 0)
      (arglist-intro . +)
      (catch-clause . 0)
      (else-clause . 0)
      (do-while-closure . 0)
      (label . 2)
      (access-label . -)
      (substatement-label . 2)
      (substatement . +)
      (statement-case-open . 0)
      (statement-case-intro . +)
      (statement-block-intro . +)
      (statement-cont . +)
      (statement . 0)
      (brace-entry-open . 0)
      (brace-list-entry . 0)
      (brace-list-intro . +)
      (brace-list-close . 0)
      (brace-list-open . 0)
      (block-close . 0)
      (inher-cont . c-lineup-multi-inher)
      (inher-intro . +)
      (member-init-cont . c-lineup-multi-inher)
      (member-init-intro . +)
      (annotation-var-cont . +)
      (annotation-top-cont . 0)
      (topmost-intro-cont . c-lineup-topmost-intro-cont)
      (topmost-intro . 0)
      (knr-argdecl . 0)
      (func-decl-cont . +)
      (inline-close . 0)
      (inline-open . +)
      (class-close . 0)
      (class-open . 0)
      (defun-block-intro . +)
      (defun-close . 0)
      (defun-open . 0)
      (string . c-lineup-dont-change)
      (arglist-close . c-lineup-arglist)
      (substatement-open . 0)
      (case-label . 0)
      (block-open . 0)
      (c . 1)
      (comment-intro . 0)
      (knr-argdecl-intro . -))
     (c-cleanup-list scope-operator brace-else-brace brace-elseif-brace brace-catch-brace empty-defun-braces list-close-comma defun-close-semi)
     (c-hanging-semi&comma-criteria c-semi&comma-no-newlines-before-nonblanks)
     (c-hanging-colons-alist
      (member-init-intro before)
      (inher-intro)
      (case-label after)
      (label after)
      (access-label after))
     (c-hanging-braces-alist
      (substatement-open after)
      (brace-list-open after)
      (brace-entry-open)
      (defun-open after)
      (class-open after)
      (inline-open after)
      (block-open after)
      (block-close . c-snug-do-while)
      (statement-case-open after)
      (substatement after))
     (c-comment-only-line-offset . 0)
     (c-basic-offset\. 4)
     (c-tab-always-indent . t)
     (header-auto-update-enabled))))
 '(smerge-command-prefix "^C ^V")
 '(standard-indent 4)
 '(tab-width 4)
 '(web-mode-code-indent-offset 2)
 '(web-mode-markup-indent-offset 2))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(flymake-errline ((((class color) (background light)) (:background "#500"))) t)
 '(flymake-error ((((class color) (background light)) (:background "#500"))))
 '(flymake-infoline ((((class color) (background light)) (:background "DarkGreen" :foreground "White"))))
 '(font-lock-comment-face ((nil (:foreground "red"))))
 '(font-lock-string-face ((t (:foreground "green"))))
 '(font-lock-variable-name-face ((t (:foreground "cyan"))))
 '(hi-pink ((t (:background "pink" :foreground "black"))))
 '(highlight ((((class color) (min-colors 8) (background light)) (:background "#080"))))
 '(highlight-indentation-current-column-face ((t (:background "#222222"))))
 '(highlight-indentation-face ((t (:background "#111111"))))
 '(org-hide ((nil (:foreground "black" :background "black"))))
 '(org-table ((t (:foreground "Blue"))))
 '(outline-2 ((t (:foreground "green" :weight bold))))
 '(outline-3 ((t (:foreground "yellow" :weight bold))))
 '(region ((t (:background "#0000ff" :foreground "white"))))
 '(secondary-selection ((((class color) (min-colors 8) (background light)) (:background "yellow1" :foreground "black"))))
 '(spacemacs-hybrid-face ((t (:inherit (quote mode-line) :background "SkyBlue2" :foreground "#000000")))))
